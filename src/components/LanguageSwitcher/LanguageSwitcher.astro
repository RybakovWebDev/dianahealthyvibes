---
import styles from "./LanguageSwitcher.module.css";

interface Props {
  locale: string;
}

const { locale = "en" } = Astro.props;
const currentPath = Astro.url.pathname;

const enUrl = currentPath.replace(/^\/ru\//, "/");
const ruUrl = currentPath.startsWith("/ru") ? currentPath : `/ru${currentPath}`;
---

<div class={styles.languageSwitcher} id="language-switcher">
  <button
    type="button"
    class={styles.button}
    id="language-button"
    aria-haspopup="listbox"
    aria-expanded="false"
  >
    <span>{locale.toUpperCase()}</span>
    <svg
      class={styles.arrow}
      width="10"
      height="6"
      viewBox="0 0 10 6"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M1 1L5 5L9 1"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <ul
    class={styles.dropdown}
    id="language-dropdown"
    role="listbox"
    aria-labelledby="language-button"
  >
    <li role="option" aria-selected={locale === "en"}>
      <a href={enUrl} class={locale === "en" ? styles.active : ""}>EN</a>
    </li>
    <li role="option" aria-selected={locale === "ru"}>
      <a href={ruUrl} class={locale === "ru" ? styles.active : ""}>RU</a>
    </li>
  </ul>
</div>

<script>
  const button = document.getElementById("language-button");
  const dropdown = document.getElementById("language-dropdown");

  if (button && dropdown) {
    button.addEventListener("click", () => {
      const expanded = button.getAttribute("aria-expanded") === "true";

      if (expanded) {
        button.setAttribute("aria-expanded", "false");
        dropdown.classList.remove("dropdown-visible");
      } else {
        button.setAttribute("aria-expanded", "true");
        dropdown.classList.add("dropdown-visible");
      }
    });

    document.addEventListener("click", (event) => {
      if (
        dropdown.classList.contains("dropdown-visible") &&
        event.target instanceof Node &&
        !button.contains(event.target) &&
        !dropdown.contains(event.target)
      ) {
        button.setAttribute("aria-expanded", "false");
        dropdown.classList.remove("dropdown-visible");
      }
    });
  }
</script>

<style>
  /* Just add the dropdown-visible class here */
  .dropdown-visible {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
</style>
